on:
  push:
    branches:
      - master
      - eio-test
  pull_request:
permissions:
  contents: read
  id-token: write
  checks: write

name: Build
jobs:
  build-amd64:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: "Read secrets"
      uses: rancher-eio/read-vault-secrets@main
      with:
        secrets: |
          secret/data/github/repo/${{ github.repository }}/github/release-app-credentials appId | APP_ID ;
          secret/data/github/repo/${{ github.repository }}/github/release-app-credentials privateKey | PRIVATE_KEY

    - name: Set the TAG value
      id: get-TAG
      run: |
        echo "$(make -s log | grep TAG)" >> "$GITHUB_ENV"

    - name: Generate GitHub App token
      id: generate-token
      env:
        # If you store these in GitHub secrets:
        APP_ID: ${{ env.APP_ID }}          # e.g. numeric app ID
        PRIVATE_KEY: ${{ env.PRIVATE_KEY }} # entire PEM content
        INSTALLATION_ID: 60236498
      run: |
        # Install any needed packages for base64, jq, openssl, etc. (on ubuntu-latest, most are preinstalled)
        # Generate a JWT valid for ~9 minutes
        HEADER=$(echo -n '{"alg":"RS256","typ":"JWT"}' | base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n')
        NOW=$(date +%s)
        EXP=$((NOW+540))  # 9 minutes from now (max allowed is 10)
        PAYLOAD=$(echo -n "{\"iat\":$NOW,\"exp\":$EXP,\"iss\":$APP_ID}" | base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n')
          
        # Sign the header.payload with your private key
        SIGNATURE=$(echo -n "$HEADER.$PAYLOAD" \
          | openssl dgst -sha256 -sign <(echo "$PRIVATE_KEY") \
          | openssl base64 -A \
          | tr -d '=' | tr '/+' '_-' | tr -d '\n')
        
        GH_APP_JWT="$HEADER.$PAYLOAD.$SIGNATURE"

        # Exchange the JWT for an installation token
        INSTALL_TOKEN=$(curl -s -X POST \
          -H "Authorization: Bearer $GH_APP_JWT" \
          -H "Accept: application/vnd.github+json" \
          https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens \
          | jq -r '.token')
        # Expose the token as an output so other steps can use it
        echo "app_token=$INSTALL_TOKEN" >> $GITHUB_OUTPUT

      # 2) Demonstrate using the token to verify you have access to a private repo
    - name: Verify repo access
      run: |
        curl -i -H "Authorization: token ${{ steps.generate-token.outputs.app_token }}" \
          https://api.github.com/repos/rancher/release-flannel
        # If this returns 200, you have access. If 404, your App isn't installed on that repo.    
    
    - name: Build container image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        tags: rancher/hardened-flannel:${{ env.TAG }}-amd64
        file: Dockerfile
        build-args: |
          TAG=${{ env.TAG }}
          SRC=x-access-token:${{ steps.generate-token.outputs.app_token }}@github.com/rancher/release-flannel

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.29.0
      with:
        image-ref: rancher/hardened-flannel:${{ env.TAG }}-amd64
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  build-arm64:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: "Read secrets"
      uses: rancher-eio/read-vault-secrets@main
      with:
        secrets: |
          secret/data/github/repo/${{ github.repository }}/github/release-app-credentials appId | APP_ID ;
          secret/data/github/repo/${{ github.repository }}/github/release-app-credentials privateKey | PRIVATE_KEY

    - name: Set the TAG value
      id: get-TAG
      run: |
        echo "$(make -s log | grep TAG)" >> "$GITHUB_ENV"

    - name: Generate GitHub App token
      id: generate-token
      env:
        # If you store these in GitHub secrets:
        APP_ID: ${{ env.APP_ID }}          # e.g. numeric app ID
        PRIVATE_KEY: ${{ env.PRIVATE_KEY }} # entire PEM content
        INSTALLATION_ID: 60236498
      run: |
        # Install any needed packages for base64, jq, openssl, etc. (on ubuntu-latest, most are preinstalled)
        # Generate a JWT valid for ~9 minutes
        HEADER=$(echo -n '{"alg":"RS256","typ":"JWT"}' | base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n')
        NOW=$(date +%s)
        EXP=$((NOW+540))  # 9 minutes from now (max allowed is 10)
        PAYLOAD=$(echo -n "{\"iat\":$NOW,\"exp\":$EXP,\"iss\":$APP_ID}" | base64 | tr -d '=' | tr '/+' '_-' | tr -d '\n')
          
        # Sign the header.payload with your private key
        SIGNATURE=$(echo -n "$HEADER.$PAYLOAD" \
          | openssl dgst -sha256 -sign <(echo "$PRIVATE_KEY") \
          | openssl base64 -A \
          | tr -d '=' | tr '/+' '_-' | tr -d '\n')
        
        GH_APP_JWT="$HEADER.$PAYLOAD.$SIGNATURE"

        # Exchange the JWT for an installation token
        INSTALL_TOKEN=$(curl -s -X POST \
          -H "Authorization: Bearer $GH_APP_JWT" \
          -H "Accept: application/vnd.github+json" \
          https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens \
          | jq -r '.token')
        # Expose the token as an output so other steps can use it
        echo "app_token=$INSTALL_TOKEN" >> $GITHUB_OUTPUT
        
    - name: Build container image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: false
        tags: rancher/hardened-flannel:${{ env.TAG }}-arm64
        file: Dockerfile
        outputs: type=docker
        platforms: linux/arm64
        build-args: |
          TAG=${{ env.TAG }}
          SRC=x-access-token:${{ steps.generate-token.outputs.app_token }}@github.com/rancher/release-flannel

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.29.0
      with:
        image-ref: rancher/hardened-flannel:${{ env.TAG }}-arm64
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
